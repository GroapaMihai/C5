CREATE OR REPLACE FUNCTION get_all_employees() RETURNS SETOF employee AS
$BODY$
DECLARE
    r employee%rowtype;
BEGIN
    FOR r IN SELECT * FROM employee
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_employee_by_id(searched_id BIGINT) RETURNS SETOF employee AS
$BODY$
DECLARE
    r employee%rowtype;
BEGIN
    FOR r IN (SELECT * FROM employee
    WHERE employee.id = searched_id)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_employees_by_account_type_name(searched_account_type_name VARCHAR) RETURNS SETOF employee AS
$BODY$
DECLARE
    r employee%rowtype;
BEGIN
    FOR r IN (SELECT * FROM employee
    WHERE (SELECT account_type.name FROM account_type WHERE account_type.id = employee.fk_account_type) = searched_account_type_name)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_employees_by_status_name(searched_status_name VARCHAR) RETURNS SETOF employee AS
$BODY$
DECLARE
    r employee%rowtype;
BEGIN
    FOR r IN (SELECT * FROM employee
    WHERE (SELECT status.name FROM status WHERE status.id = employee.fk_status) = searched_status_name)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_employees_by_account_type_name_and_status_name(searched_account_type_name VARCHAR, searched_status_name VARCHAR) RETURNS SETOF employee AS
$BODY$
DECLARE
    r employee%rowtype;
BEGIN
    FOR r IN (SELECT * FROM employee
    WHERE
    (SELECT account_type.name FROM account_type WHERE account_type.id = employee.fk_account_type) = searched_account_type_name
 	AND
 	(SELECT status.name FROM status WHERE status.id = employee.fk_status) = searched_status_name)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_employee_by_email_and_password(searched_email VARCHAR, searched_password VARCHAR) RETURNS SETOF employee AS
$BODY$
DECLARE
    r employee%rowtype;
BEGIN
    FOR r IN (SELECT * FROM employee
    WHERE
		employee.email = searched_email
	AND
		employee.password = searched_password)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION add_employee(
 first_name VARCHAR,
 last_name VARCHAR,
 hiredate DATE,
 email VARCHAR,
 phone VARCHAR,
 fk_account_type BIGINT,
 fk_status BIGINT,
 password VARCHAR,
 salary INT,
 comm NUMERIC
) 
 RETURNS VOID
AS $$
BEGIN
    INSERT INTO employee
    VALUES(
        (select nextval('seq_employee')),
        first_name,
        last_name,
        hiredate,
        email,
        phone,
        fk_account_type,
        fk_status,
        password,
		salary,
		comm
    );
END; $$ 
 
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION update_employee(
    id_u BIGINT,
    first_name_u VARCHAR,
    last_name_u VARCHAR,
    hiredate_u DATE,
    email_u VARCHAR,
    phone_u VARCHAR,
    fk_account_type_u BIGINT,
    fk_status_u BIGINT,
    password_u VARCHAR,
	salary_u INT,
	comm_u NUMERIC
)
RETURNS BIGINT
AS $$
DECLARE
	employee_id BIGINT;
BEGIN
	employee_id := (SELECT employee.id FROM employee WHERE employee.id = id_u);

	IF employee_id IS NULL THEN
    	RETURN add_employee(
            first_name_u,
            last_name_u,
            hiredate_u,
            email_u,
            phone_u,
            fk_account_type_u,
            fk_status_u,
            password_u,
			salary_u,
			comm_u
    	);
    ELSE
        UPDATE employee SET
            first_name = first_name_u,
            last_name = last_name_u,
            hiredate = hiredate_u,
            email = email_u,
            phone = phone_u,
            fk_account_type = fk_account_type_u,
            fk_status = fk_status_u,
            password = password_u,
			salary = salary_u,
			comm = comm_u
		WHERE id = id_u;

    	RETURN id_u;
    END IF;
END; $$ 
 
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_deliveries_nr_between_dates_for_employee(start_date DATE, end_date DATE, employee_id BIGINT)
RETURNS BIGINT
AS
$BODY$
DECLARE
    deliveries_number BIGINT;
    planification_row planification%rowtype;
    delivery_row delivery%rowtype;
BEGIN
	deliveries_number := 0;

    FOR planification_row IN SELECT * FROM get_planifications_by_employee_id_and_status_name(employee_id, 'Delivered')
	LOOP
    	delivery_row := get_delivery_by_id(planification_row.fk_delivery);
        IF delivery_row.delivery_date BETWEEN start_date AND end_date THEN
        	deliveries_number := deliveries_number + 1;
        END IF;
    END LOOP;
    RETURN deliveries_number;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_company_revenue_between_dates_from_employee(start_date DATE, end_date DATE, employee_id BIGINT)
RETURNS BIGINT
AS
$BODY$
DECLARE
    company_revenue BIGINT;
    planification_row planification%rowtype;
    delivery_row delivery%rowtype;
BEGIN
	company_revenue := 0;

    FOR planification_row IN SELECT * FROM get_planifications_by_employee_id_and_status_name(employee_id, 'Delivered')
	LOOP
    	delivery_row := get_delivery_by_id(planification_row.fk_delivery);
        IF delivery_row.delivery_date BETWEEN start_date AND end_date THEN
        	company_revenue := company_revenue + delivery_row.company_reward;
        END IF;
    END LOOP;
    RETURN company_revenue;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_employees_eligible_for_revenue_inc(
    min_deliveries INTEGER,
    operator_v VARCHAR,
    min_company_revenue_from_driver INTEGER,
    start_date DATE,
    end_date DATE
)
RETURNS SETOF employee
AS
$BODY$
DECLARE
    employee_row employee%rowtype;
    deliveries_number_for_employee BIGINT;
    company_revenue_from_employee BIGINT;
BEGIN
    FOR employee_row IN SELECT * FROM get_all_employees()
	LOOP
    	deliveries_number_for_employee := get_deliveries_nr_between_dates_for_employee(start_date, end_date, employee_row.id);
        company_revenue_from_employee := get_company_revenue_between_dates_from_employee(start_date, end_date, employee_row.id);

        IF operator_v = 'AND' THEN
            IF deliveries_number_for_employee >= min_deliveries AND company_revenue_from_employee >= min_company_revenue_from_driver THEN
                RETURN NEXT employee_row;
            END IF;
        ELSIF operator_v = 'OR' THEN
            IF deliveries_number_for_employee >= min_deliveries OR company_revenue_from_employee >= min_company_revenue_from_driver THEN
                RETURN NEXT employee_row;
            END IF;
        END IF;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION apply_revenue_inc(
    salary_increase NUMERIC,
    salary_increase_type VARCHAR,
    comm_increase NUMERIC,
    comm_increase_type VARCHAR,
    min_deliveries INTEGER,
    operator_v VARCHAR,
    min_company_revenue_from_driver INTEGER,
    start_date DATE,
    end_date DATE
)
RETURNS SETOF employee
AS
$BODY$
DECLARE
    employee_row employee%rowtype;
    new_salary INTEGER;
    new_comm NUMERIC;
BEGIN
    FOR employee_row IN SELECT * FROM get_employees_eligible_for_revenue_inc(min_deliveries, operator_v, min_company_revenue_from_driver, start_date, end_date)
	LOOP
        IF salary_increase_type = 'Fixed Value' THEN
            new_salary := employee_row.salary + salary_increase;
        ELSIF salary_increase_type = 'Percentage' THEN
            new_salary := employee_row.salary * salary_increase;
        END IF;
        
        IF comm_increase_type = 'Fixed Value' THEN
            new_comm := employee_row.comm + comm_increase;
        ELSIF comm_increase_type = 'Percentage' THEN
            new_comm := employee_row.comm * comm_increase;
        END IF;

		employee_row.salary := new_salary;
		employee_row.comm := new_comm;

        UPDATE employee
		SET salary = new_salary, comm = new_comm
		WHERE id = employee_row.id;
        
        RETURN NEXT employee_row;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



SELECT * FROM apply_revenue_inc(500, 'Fixed Value', 0.1, 'Fixed Value', 2, 'AND', 3000, '01-01-2009', '01-01-2020');