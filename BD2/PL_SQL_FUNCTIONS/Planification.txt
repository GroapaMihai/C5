CREATE OR REPLACE FUNCTION get_all_planifications() RETURNS SETOF planification AS
$BODY$
DECLARE
    r planification%rowtype;
BEGIN
    FOR r IN SELECT * FROM planification
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_planification_by_id(searched_id BIGINT) RETURNS SETOF planification AS
$BODY$
DECLARE
    r planification%rowtype;
BEGIN
    FOR r IN (SELECT * FROM planification
     WHERE planification.id = searched_id)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_planifications_by_employee_id(searched_employee_id BIGINT) RETURNS SETOF planification AS
$BODY$
DECLARE
    r planification%rowtype;
BEGIN
    FOR r IN (SELECT * FROM planification
    WHERE planification.fk_employee = searched_employee_id)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_planifications_by_status_name(searched_status_name VARCHAR) RETURNS SETOF planification AS
$BODY$
DECLARE
    r planification%rowtype;
BEGIN
    FOR r IN (SELECT * FROM planification
    WHERE (SELECT status.name FROM status WHERE status.id = planification.fk_status) = searched_status_name)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_planifications_by_employee_id_and_status_name(searched_employee_id BIGINT, searched_status_name VARCHAR) RETURNS SETOF planification AS
$BODY$
DECLARE
    r planification%rowtype;
BEGIN
    FOR r IN (SELECT * FROM planification
    WHERE planification.fk_employee = searched_employee_id
 	AND
 	(SELECT status.name FROM status WHERE status.id = planification.fk_status) = searched_status_name)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION add_planification(
    fk_employee BIGINT,
    fk_vehicle BIGINT,
    fk_delivery BIGINT,
    fk_status BIGINT
) 
 RETURNS VOID
AS $$
BEGIN
    INSERT INTO planification
    VALUES(
        (select nextval('seq_planification')),
        fk_employee,
        fk_vehicle,
        fk_delivery,
        fk_status
    );
END; $$ 
 
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION update_planification(
    id_u BIGINT,
    fk_employee_u BIGINT,
    fk_vehicle_u BIGINT,
    fk_delivery_u BIGINT,
    fk_status_u BIGINT
)
RETURNS BIGINT
AS $$
DECLARE
	planification_id BIGINT;
BEGIN
	planification_id := (SELECT planification.id FROM planification WHERE planification.id = id_u);

	IF planification_id IS NULL THEN
    	RETURN add_planification(
            fk_employee_u,
            fk_vehicle_u,
            fk_delivery_u,
            fk_status_u
        );
    ELSE
        UPDATE planification SET
            fk_employee = fk_employee_u,
            fk_vehicle = fk_vehicle_u,
            fk_delivery = fk_delivery_u,
            fk_status = fk_status_u
		WHERE id = id_u;

    	RETURN id_u;
    END IF;
END; $$ 
 
LANGUAGE 'plpgsql';