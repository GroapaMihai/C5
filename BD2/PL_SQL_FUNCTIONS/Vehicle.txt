CREATE OR REPLACE FUNCTION get_all_vehicles() RETURNS SETOF vehicle AS
$BODY$
DECLARE
    r vehicle%rowtype;
BEGIN
    FOR r IN SELECT * FROM vehicle
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_vehicle_by_id(searched_id BIGINT) RETURNS SETOF vehicle AS
$BODY$
DECLARE
    r vehicle%rowtype;
BEGIN
    FOR r IN (SELECT * FROM vehicle
    WHERE vehicle.id = searched_id)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION get_vehicles_by_status_name(searched_status_name VARCHAR) RETURNS SETOF vehicle AS
$BODY$
DECLARE
    r vehicle%rowtype;
BEGIN
    FOR r IN (SELECT * FROM vehicle
    WHERE (SELECT status.name FROM status WHERE status.id = vehicle.fk_status) = searched_status_name)
    LOOP
        RETURN NEXT r;
    END LOOP;
    RETURN;
END
$BODY$
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION add_vehicle(
    registration_number VARCHAR,
    brand VARCHAR,
    model VARCHAR,
    fk_color BIGINT,
    first_registration_date DATE,
    travelled_distance INT,
    current_value INT,
    fk_status BIGINT
)
RETURNS BIGINT
AS $$
DECLARE
	inserted_id BIGINT;
BEGIN
	inserted_id := (select nextval('seq_vehicle'));

    INSERT INTO vehicle
    VALUES(
        inserted_id,
        registration_number,
        brand,
        model,
        fk_color,
        first_registration_date,
        travelled_distance,
        current_value,
        fk_status
    );

	RETURN inserted_id;
END; $$ 
 
LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION update_vehicle(
    id_u BIGINT,
    registration_number_u VARCHAR,
    brand_u VARCHAR,
    model_u VARCHAR,
    fk_color_u BIGINT,
    first_registration_date_u DATE,
    travelled_distance_u INT,
    current_value_u INT,
    fk_status_u BIGINT
)
RETURNS BIGINT
AS $$
DECLARE
	vehicle_id BIGINT;
BEGIN
	vehicle_id := (SELECT vehicle.id FROM vehicle WHERE vehicle.id = id_u);

	IF vehicle_id IS NULL THEN
    	RETURN add_vehicle(
            registration_number_u,
            brand_u,
            model_u,
            fk_color_u,
            first_registration_date_u,
            travelled_distance_u,
            current_value_u,
            fk_status_u
        );
    ELSE
        UPDATE vehicle SET
        	registration_number = registration_number_u,
            brand = brand_u,
            model = model_u,
          	fk_color = fk_color_u,
            first_registration_date = first_registration_date_u,
            travelled_distance = travelled_distance_u,
            current_value = current_value_u,
            fk_status = fk_status_u
		WHERE id = id_u;

    	RETURN id_u;
    END IF;
END; $$ 
 
LANGUAGE 'plpgsql';